using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using static Main;

// Скрипт описывает логику клеток, по которым можно перемещаться в 3D пространстве (для A* или других алгоритмов).
// Каждая клетка имеет координаты, ссылку на визуальный объект и свойства для определения проходимости.
// MoveCell представляет собой логическую единицу, по которой можно перемещаться в 3D пространстве.
// Она содержит координаты, ссылку на визуальный объект и свойства для определения проходимости и стоимости пути.
public class MoveCell
{
    public Vector3Int Position { get; private set; }      // Координаты клетки
    public GameObject CellObject { get; private set; }    // Ссылка на визуальный объект клетки
    public bool IsWalkable { get; set; }                  // Можно ли по этой клетке ходить
    public float MoveCost { get; set; }                   // Стоимость перемещения по этой клетке (может быть разной для разных типов клеток)

    public Main.CellType undertype; // Тип клетки, определяемый в основном скрипте

    // Параметры для алгоритма A*:
    public float GCost;                                   // Стоимость пути от начальной клетки до этой
    public float HCost;                                   // Оценка оставшегося расстояния до цели
    public float FCost => GCost + HCost;                  // Суммарная стоимость
    public MoveCell Parent;                               // Ссылка на предыдущую клетку (для восстановления пути)

    // Конструктор и инициализация
    public MoveCell(int x, int y, int z, GameObject cellObject, bool isWalkable, float moveCost, CellType undertype)  // Конструктор для инициализации клетки
    {
        Position = new Vector3Int(x, y, z); // Инициализация координат клетки
        CellObject = cellObject;  // Ссылка на визуальный объект клетки
        IsWalkable = isWalkable;  // Установка проходимости клетки
        MoveCost = moveCost; // Установка стоимости перемещения по клетке
        this.undertype = undertype; // Установка типа клетки
    }
}

public class Global
{
    private static Global _instance;

    public static Global Instance
    {
        get
        {
            if (_instance == null)
                _instance = new Global();
            return _instance;
        }
    }

    // Переменная, доступная всем
    public bool isDone = true;

    // Закрытый конструктор, чтобы нельзя было создать ещё экземпляр
    private Global() { }
}